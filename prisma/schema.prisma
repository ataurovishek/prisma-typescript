// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  age              Int
  name             String?
  email            String          @unique
  role             Role            @default(BASIC)
  writtenPosts     Post[]          @relation("writtenPosts") //one to many //here one user have many posts because here we uses array and this is called one to many relationship because this user can stores a lot of posts
  favouritePosts   Post[]          @relation("favouritePosts") //we define name like 'favouritePosts' to recognise which posts is related to favourite //here one user have many posts because here we uses array and this is called one to many relationship because this user can stores a lot of posts
  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?         @unique //one to one //here ony one user can have one preferences becaise we use @unique and we use question marks on userPreference because it is optional

  @@unique([age, name]) // here we use @@unique block level directive to make sure that name and age should be unique
  @@index([email]) // here we use @@index block level directive to make sure that email should be indexed
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?
}

model Post {
  id            Int        @id @default(autoincrement())
  title         String
  averagerating Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("writtenPosts", fields: [authorId], references: [id])
  authorId      String
  favouriteBy   User?      @relation("favouritePosts", fields: [favouriteById], references: [id])
  favouriteById String?
  category      Category[] //many to many //here many post can have many categories because here we uses array and this is called many to many relationship because this post can belongs to many categories
}

model Category {
  id    String @id @default(uuid())
  name  String
  posts Post[] //many to many
}

enum Role {
  BASIC
  EDITOR
  ADMIN
}
